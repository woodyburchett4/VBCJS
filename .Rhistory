for(i in 2:5){
curve(dbeta(x, VB.old$p.alpha[i], VB.old$p.beta[i]), col='green', ylab='Density', xlab=bquote(p[.(i)]), main=bquote("Density Plot of "*p[.(i)]), xlim=c(0,1))
lines(density(plogis(rnorm(10000, VB.final[['mu.eta']][i], sqrt(VB.final[['var.eta']][i])))), col='blue')
#   lines(density(plogis(rnorm(10000, VB.final.2[['mu.eta']][i], sqrt(VB.final.2[['var.eta']][i])))), col='purple')
lines(density(p[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(2,2))
for(i in 2:5){
curve(dnorm(x, VB.old$mu.delta[i], VB.old$sd.delta[i]), n=1000, col='green', ylab='Density', xlab=bquote(Delta[.(i)]), main=bquote("Density Plot of "*Delta[.(i)]), xlim=c(-1,2))
curve(dnorm(x, VB.final$mu.delta[i], VB.final$sd.delta[i]), n=1000, col='blue', add=TRUE)
#   curve(dnorm(x, VB.final.2$mu.delta[i], VB.final.2$sd.delta[i]), n=1000, col='purple', add=TRUE)
lines(density(delta[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(1,1))
curve(dgamma(x, VB.old$tau.alpha, VB.old$tau.beta), 0.5, 2, n=1000, col="green", ylab='Density', xlab=expression(tau), main=expression("Density Plot of "*tau*" for Simulated Data"))
curve(dgamma(x, VB.final[['tau.alpha']], VB.final[['tau.beta']]), n=1000, add=TRUE, col="blue")
# curve(dgamma(x, VB.final.2[['tau.alpha']], VB.final.2[['tau.beta']]), n=1000, add=TRUE, col="purple")
lines(density(tau), col="red")
legend('topleft', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
detach.jags()
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
attach.jags(fit.sim.jags)
par(mfrow=c(1,1))
VB.final.2 <- VB.sim.chi.last.results[[length(VB.sim.chi.last.results)]]
VB.final <- VB.sim.chi.results[[length(VB.sim.chi.results)]]
VB.old <- VB.sim.results[[length(VB.sim.results)]]
curve(dnorm(x, VB.old$mu.b0, sqrt(VB.old$cov.beta[1,1])), -1, 1, col="green", ylab='Density', xlab=expression(beta[0]), main=expression("Density Plots of "*beta[0]*" for Simulated Data"))
curve(dnorm(x, VB.final[['mu.b0']], sqrt(VB.final[['cov.beta']][1,1])), add=TRUE, col="blue")
# curve(dnorm(x, VB.final.2[['mu.b0']], sqrt(VB.final.2[['cov.beta']][1,1])), add=TRUE, col="purple")
lines(density(beta[,1]), col="red")
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
curve(dnorm(x, VB.old$mu.b1, sqrt(VB.old$cov.beta[2,2])), -0.2, 0.7, col="green", ylab='Density', xlab=expression(beta[1]), main=expression("Density Plots of "*beta[1]*" for Simulated Data"))
curve(dnorm(x, VB.final[['mu.b1']], sqrt(VB.final[['cov.beta']][2,2])), add=TRUE, col="blue")
# curve(dnorm(x, VB.final.2[['mu.b1']], sqrt(VB.final.2[['cov.beta']][2,2])), add=TRUE, col="purple")
lines(density(beta[,2]), col="red")
legend('topleft', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(2,2))
for(i in 2:5){
curve(dbeta(x, VB.old$p.alpha[i], VB.old$p.beta[i]), col='green', ylab='Density', xlab=bquote(p[.(i)]), main=bquote("Density Plot of "*p[.(i)]), xlim=c(0,1))
lines(density(plogis(rnorm(10000, VB.final[['mu.eta']][i], sqrt(VB.final[['var.eta']][i])))), col='blue')
#   lines(density(plogis(rnorm(10000, VB.final.2[['mu.eta']][i], sqrt(VB.final.2[['var.eta']][i])))), col='purple')
lines(density(p[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(2,2))
for(i in 2:5){
curve(dnorm(x, VB.old$mu.delta[i], VB.old$sd.delta[i]), n=1000, col='green', ylab='Density', xlab=bquote(Delta[.(i)]), main=bquote("Density Plot of "*Delta[.(i)]), xlim=c(-1,2))
curve(dnorm(x, VB.final$mu.delta[i], VB.final$sd.delta[i]), n=1000, col='blue', add=TRUE)
#   curve(dnorm(x, VB.final.2$mu.delta[i], VB.final.2$sd.delta[i]), n=1000, col='purple', add=TRUE)
lines(density(delta[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(1,1))
curve(dgamma(x, VB.old$tau.alpha, VB.old$tau.beta), 0.5, 2, n=1000, col="green", ylab='Density', xlab=expression(tau), main=expression("Density Plot of "*tau*" for Simulated Data"))
curve(dgamma(x, VB.final[['tau.alpha']], VB.final[['tau.beta']]), n=1000, add=TRUE, col="blue")
# curve(dgamma(x, VB.final.2[['tau.alpha']], VB.final.2[['tau.beta']]), n=1000, add=TRUE, col="purple")
lines(density(tau), col="red")
legend('topleft', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
detach.jags()
VB.sim.chi.results
VB.sim.chi.results[[178]]
summary(VB.sim.chi.results[[178]])
VB.sim.chi.results[[178]]$time
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
VB.sim.chi.results
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
VB.sim.chi.results
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm_d.R')
system.time( VB.sim.chi.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
attach.jags(fit.sim.jags)
par(mfrow=c(1,1))
VB.final.2 <- VB.sim.chi.last.results[[length(VB.sim.chi.last.results)]]
VB.final <- VB.sim.chi.results[[length(VB.sim.chi.results)]]
VB.old <- VB.sim.results[[length(VB.sim.results)]]
curve(dnorm(x, VB.old$mu.b0, sqrt(VB.old$cov.beta[1,1])), -1, 1, col="green", ylab='Density', xlab=expression(beta[0]), main=expression("Density Plots of "*beta[0]*" for Simulated Data"))
curve(dnorm(x, VB.final[['mu.b0']], sqrt(VB.final[['cov.beta']][1,1])), add=TRUE, col="blue")
# curve(dnorm(x, VB.final.2[['mu.b0']], sqrt(VB.final.2[['cov.beta']][1,1])), add=TRUE, col="purple")
lines(density(beta[,1]), col="red")
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
curve(dnorm(x, VB.old$mu.b1, sqrt(VB.old$cov.beta[2,2])), -0.2, 0.7, col="green", ylab='Density', xlab=expression(beta[1]), main=expression("Density Plots of "*beta[1]*" for Simulated Data"))
curve(dnorm(x, VB.final[['mu.b1']], sqrt(VB.final[['cov.beta']][2,2])), add=TRUE, col="blue")
# curve(dnorm(x, VB.final.2[['mu.b1']], sqrt(VB.final.2[['cov.beta']][2,2])), add=TRUE, col="purple")
lines(density(beta[,2]), col="red")
legend('topleft', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(2,2))
for(i in 2:5){
curve(dbeta(x, VB.old$p.alpha[i], VB.old$p.beta[i]), col='green', ylab='Density', xlab=bquote(p[.(i)]), main=bquote("Density Plot of "*p[.(i)]), xlim=c(0,1))
lines(density(plogis(rnorm(10000, VB.final[['mu.eta']][i], sqrt(VB.final[['var.eta']][i])))), col='blue')
#   lines(density(plogis(rnorm(10000, VB.final.2[['mu.eta']][i], sqrt(VB.final.2[['var.eta']][i])))), col='purple')
lines(density(p[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(2,2))
for(i in 2:5){
curve(dnorm(x, VB.old$mu.delta[i], VB.old$sd.delta[i]), n=1000, col='green', ylab='Density', xlab=bquote(Delta[.(i)]), main=bquote("Density Plot of "*Delta[.(i)]), xlim=c(-1,2))
curve(dnorm(x, VB.final$mu.delta[i], VB.final$sd.delta[i]), n=1000, col='blue', add=TRUE)
#   curve(dnorm(x, VB.final.2$mu.delta[i], VB.final.2$sd.delta[i]), n=1000, col='purple', add=TRUE)
lines(density(delta[,i]), col='red')
}
legend('topright', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
par(mfrow=c(1,1))
curve(dgamma(x, VB.old$tau.alpha, VB.old$tau.beta), 0.5, 2, n=1000, col="green", ylab='Density', xlab=expression(tau), main=expression("Density Plot of "*tau*" for Simulated Data"))
curve(dgamma(x, VB.final[['tau.alpha']], VB.final[['tau.beta']]), n=1000, add=TRUE, col="blue")
# curve(dgamma(x, VB.final.2[['tau.alpha']], VB.final.2[['tau.beta']]), n=1000, add=TRUE, col="purple")
lines(density(tau), col="red")
legend('topleft', legend=c('MFVB', 'MFVB-Corr.','MCMC'), col=c('green', 'blue','red'), lty=1)
detach.jags()
# Load data
load('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Cliff_Swallows\\Data\\csw_for_woody_1_140715.Rdata')
# Look at only those banded as adults
csw.adult.data <- csw.data[which(csw.data$BANDAGE=='A'),]
# Remove capture histories with NA in them
csw.adult.data <- csw.adult.data[-grep("NA",csw.adult.data$CH),]
# Remove wierd capture history with a "y" in it
csw.adult.data <- csw.adult.data[-131468,]
# Remove wierd covariate value that's extremely high
csw.adult.data <- csw.adult.data[-133252,]
# Create matrix of capture histories
X <- sapply(csw.adult.data$CH, function(x){as.numeric(unlist(strsplit(x,"")))})
dimnames(X) <- NULL
X <- t(X)
# Remove last capture history (because it has no covariate data with it)
X <- X[,-ncol(X)]
# Create matrix of covariates
Y.early <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNEARLYWT", names(csw.adult.data))]])
Y.early <- apply(Y.early, 1, as.numeric)
Y.early <- t(Y.early)
dimnames(Y.early) <- NULL
Y.mid <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNMIDWT", names(csw.adult.data))]])
Y.mid <- apply(Y.mid, 1, as.numeric)
Y.mid <- t(Y.mid)
dimnames(Y.mid) <- NULL
Y.late <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNLATEWT", names(csw.adult.data))]])
Y.late <- apply(Y.late, 1, as.numeric)
Y.late <- t(Y.late)
dimnames(Y.late) <- NULL
# Which has the least missing data?
1 - sum(is.na(Y.early[which(X==1)]))/length(Y.early[which(X==1)])
1 - sum(is.na(Y.mid[which(X==1)]))/length(Y.mid[which(X==1)])
1 - sum(is.na(Y.late[which(X==1)]))/length(Y.late[which(X==1)])
Y.all <- array(c(Y.early, Y.mid, Y.late), dim=c(dim(Y.early),3))
Y.all <- apply(Y.all, c(1,2), function(x){mean(x,na.rm=TRUE)})
1 - sum(is.na(Y.all[which(X==1)]))/length(Y.all[which(X==1)])
Y <- Y.mid
# Ensure that each capture has a corresponding covariate
X[is.na(Y)] <- 0
Y[X==0] <- NA
# Remove individuals without any captures
missing.index <- which(apply(X, 1, function(x){sum(x)>0}))
X <- X[missing.index,]
Y <- Y[missing.index,]
t <- ncol(X)
n <- nrow(X)
# Identify first and last captures
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Take only the first 10 years
X <- X[which(f<10),1:10]
Y <- Y[which(f<10),1:10]
# Identify first and last captures again
t <- ncol(X)
n <- nrow(X)
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Standardize weight covariate
Y <- (Y-mean(Y, na.rm=TRUE))/sd(Y, na.rm=TRUE)
# Generate Priors
priors.list <- list("mu.b0.prior" = 0,
"mu.b1.prior" = 0,
"sd.b0.prior" = 1,
"sd.b1.prior" = 1,
"p.alpha.prior" = 1,
"p.beta.prior" = 1,
"mu.delta.prior" = 0,
"sd.delta.prior" = 1,
"tau.alpha.prior" = 1,
"tau.beta.prior" = 1)
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm.R')
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\Modular\\initial_values.R')
init.list <- initial.values(X,Y,f,l,priors.list)
system.time( VB.naive.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
setwd('C:\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test')
require(R2jags)
load('C:/Users/Woody/Dropbox/Variational Bayes Work/Continuous Missing Covariates/mcmc_csw_subset_midwt.gzip')
source('C:/Users/Woody/Dropbox/Variational Bayes Work/Continuous Missing Covariates/gen_data.R')
# Define priors
priors.list <- list("mu.b0.prior" = 0,
"mu.b1.prior" = 0,
"sd.b0.prior" = 1,
"sd.b1.prior" = 1,
"p.alpha.prior" = 1,
"p.beta.prior" = 1,
"mu.delta.prior" = 0,
"sd.delta.prior" = 1,
"tau.alpha.prior" = 1,
"tau.beta.prior" = 1)
# Generate Data
sample.dat <- gen.data( 5, 300, fit.standard.jags$BUGSoutput$mean$beta[1], fit.standard.jags$BUGSoutput$mean$beta[2], fit.standard.jags$BUGSoutput$mean$p, fit.standard.jags$BUGSoutput$mean$delta, fit.standard.jags$BUGSoutput$mean$tau)
X <- sample.dat$X
Y <- sample.dat$Y
t <- ncol(X)
n <- nrow(X)
# Identify first and last captures
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\Modular\\VB_naive_nlm.R')
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\Modular\\initial_values.R')
init.list <- initial.values(X,Y,f,l,priors.list)
init.list$mu.eta <- c(NA, rep(0, t-1))
init.list
install.packages(RMark)
install.packages('RMark')
require(RMark)
?Rmark
?RMark
??RMark
help('RMark')
??RMark
?CJS
?dipper.data
require(RMark)
data(dipper)
dipper.model=mark(dipper)
dipper.model
dipper
dipper.processed=process.data(dipper,groups=("sex"))
dipper.processed
dipper.ddl=make.design.data(dipper.processed)
dipper.ddl$Phi$Flood=0
dipper.ddl$Phi$Flood[dipper.ddl$Phi$time==2 | dipper.ddl$Phi$time==3]=1
dipper.ddl$p$Flood=0
dipper.ddl$p$Flood[dipper.ddl$p$time==3]=1
dipper.ddl
Phidot=list(formula=~1)
Phitime=list(formula=~time)
Phisex=list(formula=~sex)
Phisextime=list(formula=~sex+time)
Phisex.time=list(formula=~sex*time)
PhiFlood=list(formula=~Flood)
Phidot
Phitime
Phisex
Phisextime
pdot=list(formula=~1)
ptime=list(formula=~time)
psex=list(formula=~sex)
psextime=list(formula=~sex+time)
psex.time=list(formula=~sex*time)
pFlood=list(formula=~Flood)
pdot
ptime
dipper.phidot.pFlood          =mark(dipper.processed,dipper.ddl,
model.parameters=list(Phi=Phidot,p=pFlood))
dipper.phidot.pFlood
results(dipper.phidot.pFlood)
merge.mark(dipper.phidot.pFlood)
test <- merge.mark(dipper.phidot.pFlood)
test
summary(test)
test[[1]]
print(test[[1]])
summary(dipper.phidot.pFlood)
summary(summary(dipper.phidot.pFlood))
summary(dipper.phidot.pFlood)$beta
X
init
inits
init.list
init.list$Y.current
Y.full <- init.list$Y.current
X
require(RMark)
Y.full
dipper.processed=process.data(dipper,groups=("sex"))
dipper.processed
dipper.ddl=make.design.data(dipper.processed)
dipper.ddl
process.data(X)
dipper
class(dipper)
head(dipper)
head(ZX)
head(X)
do.call(paste0, c(X[ , 1:ncol(X)]))
do.call(paste0, c(X[ , 1:ncol(X)], list(sep="")))
?apply
apply(X, 2, function(x){paste0(x, sep="")})
?paste
apply(X, 2, function(x){paste0(x, collapse="")})
apply(X, 1, function(x){paste0(x, collapse="")})
test.df <- data.frame(ch=apply(X, 1, function(x){paste0(x, collapse="")}))
test.df
process.data(test.df)
test.df
test.df[,1]
test.df <- data.frame(ch=as.character(apply(X, 1, function(x){paste0(x, collapse="")})))
process.data(test.df)
test.df$ch
?data.frame
test.df <- data.frame(ch=as.character(apply(X, 1, function(x){paste0(x, collapse="")})), stringsAsFactors=FALSE)
process.data(test.df)
test.processed <- process.data(test.df)
test.ddl <- make.design.data(test.processed)
test.ddl
dipper.ddl=make.design.data(dipper.processed)
dipper.ddl
dipper.ddl$Phi$Flood=0
dipper.ddl$Phi$Flood[dipper.ddl$Phi$time==2 | dipper.ddl$Phi$time==3]=1
dipper.ddl$p$Flood=0
dipper.ddl$p$Flood[dipper.ddl$p$time==3]=1
dipper.ddl
test.df <- data.frame(ch=as.character(apply(X, 1, function(x){paste0(x, collapse="")})), stringsAsFactors=FALSE, Y=Y.full)
test.processed <- process.data(test.df)
test.processed
test.ddl <- make.design.data(test.processed)
test.ddl
test.ddl$Phi
test.ddl$P
test.ddl$p
test.processed
?process.data
?make.design.data
merge_design.covariates(test.ddl, Y.full)
merge_design.covariates(test.ddl, test.df)
df=data.frame(group=c(rep("Female",6),rep("Male",6)),time=rep(c(2:7),2),
effort=c(10,5,2,8,1,2,3,20,10,4,16,2))
df
?create.td
# Load data
load('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Cliff_Swallows\\Data\\csw_for_woody_1_140715.Rdata')
# Look at only those banded as adults
csw.adult.data <- csw.data[which(csw.data$BANDAGE=='A'),]
# Remove capture histories with NA in them
csw.adult.data <- csw.adult.data[-grep("NA",csw.adult.data$CH),]
# Remove wierd capture history with a "y" in it
csw.adult.data <- csw.adult.data[-131468,]
# Remove wierd covariate value that's extremely high
csw.adult.data <- csw.adult.data[-133252,]
# Create matrix of capture histories
X <- sapply(csw.adult.data$CH, function(x){as.numeric(unlist(strsplit(x,"")))})
dimnames(X) <- NULL
X <- t(X)
# Remove last capture history (because it has no covariate data with it)
X <- X[,-ncol(X)]
# Create matrix of covariates
Y.early <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNEARLYWT", names(csw.adult.data))]])
Y.early <- apply(Y.early, 1, as.numeric)
Y.early <- t(Y.early)
dimnames(Y.early) <- NULL
Y.mid <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNMIDWT", names(csw.adult.data))]])
Y.mid <- apply(Y.mid, 1, as.numeric)
Y.mid <- t(Y.mid)
dimnames(Y.mid) <- NULL
Y.late <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNLATEWT", names(csw.adult.data))]])
Y.late <- apply(Y.late, 1, as.numeric)
Y.late <- t(Y.late)
dimnames(Y.late) <- NULL
# Which has the least missing data?
1 - sum(is.na(Y.early[which(X==1)]))/length(Y.early[which(X==1)])
1 - sum(is.na(Y.mid[which(X==1)]))/length(Y.mid[which(X==1)])
1 - sum(is.na(Y.late[which(X==1)]))/length(Y.late[which(X==1)])
Y.all <- array(c(Y.early, Y.mid, Y.late), dim=c(dim(Y.early),3))
Y.all <- apply(Y.all, c(1,2), function(x){mean(x,na.rm=TRUE)})
1 - sum(is.na(Y.all[which(X==1)]))/length(Y.all[which(X==1)])
Y <- Y.mid
# Ensure that each capture has a corresponding covariate
X[is.na(Y)] <- 0
Y[X==0] <- NA
# Remove individuals without any captures
missing.index <- which(apply(X, 1, function(x){sum(x)>0}))
X <- X[missing.index,]
Y <- Y[missing.index,]
t <- ncol(X)
n <- nrow(X)
# Identify first and last captures
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Take only the first 10 years
X <- X[which(f<10),1:10]
Y <- Y[which(f<10),1:10]
# Identify first and last captures again
t <- ncol(X)
n <- nrow(X)
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Standardize weight covariate
Y <- (Y-mean(Y, na.rm=TRUE))/sd(Y, na.rm=TRUE)
# Generate Priors
priors.list <- list("mu.b0.prior" = 0,
"mu.b1.prior" = 0,
"sd.b0.prior" = 1,
"sd.b1.prior" = 1,
"p.alpha.prior" = 1,
"p.beta.prior" = 1,
"mu.delta.prior" = 0,
"sd.delta.prior" = 1,
"tau.alpha.prior" = 1,
"tau.beta.prior" = 1)
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\csw_checks\\chi_test\\VB_chi_nlm.R')
source('C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\Modular\\initial_values.R')
init.list <- initial.values(X,Y,f,l,priors.list)
system.time( VB.naive.results <- VB.naive(X, Y, f, l, priors.list, init.list, converge.criterion=.0001) )
getwd()
save(VB.naive.results, file='C:\\Users\\Woody\\Dropbox\\Variational Bayes Work\\Continuous Missing Covariates\\vb_csw_subset_midwt_chi.gzip', compress=TRUE)
setwd("C:/Users/Woody/Dropbox/Truncated_CJS/time-varying")
# Load data
load('csw_for_woody_1_140715.Rdata')
# Look at only those banded as adults
csw.adult.data <- csw.data[which(csw.data$BANDAGE=='A'),]
# Remove capture histories with NA in them
csw.adult.data <- csw.adult.data[-grep("NA",csw.adult.data$CH),]
# Remove wierd capture history with a "y" in it
csw.adult.data <- csw.adult.data[-131468,]
# Remove wierd covariate value that's extremely high
csw.adult.data <- csw.adult.data[-133252,]
# Create matrix of capture histories
X <- sapply(csw.adult.data$CH, function(x){as.numeric(unlist(strsplit(x,"")))})
dimnames(X) <- NULL
X <- t(X)
# Remove last capture history (because it has no covariate data with it)
X <- X[,-ncol(X)]
# Create matrix of covariates
Y.early <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNEARLYWT", names(csw.adult.data))]])
Y.early <- apply(Y.early, 1, as.numeric)
Y.early <- t(Y.early)
dimnames(Y.early) <- NULL
Y.mid <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNMIDWT", names(csw.adult.data))]])
Y.mid <- apply(Y.mid, 1, as.numeric)
Y.mid <- t(Y.mid)
dimnames(Y.mid) <- NULL
Y.late <- as.matrix(csw.adult.data[, names(csw.adult.data)[grep("MNLATEWT", names(csw.adult.data))]])
Y.late <- apply(Y.late, 1, as.numeric)
Y.late <- t(Y.late)
dimnames(Y.late) <- NULL
# Which has the least missing data?
1 - sum(is.na(Y.early[which(X==1)]))/length(Y.early[which(X==1)])
1 - sum(is.na(Y.mid[which(X==1)]))/length(Y.mid[which(X==1)])
1 - sum(is.na(Y.late[which(X==1)]))/length(Y.late[which(X==1)])
Y.all <- array(c(Y.early, Y.mid, Y.late), dim=c(dim(Y.early),3))
Y.all <- apply(Y.all, c(1,2), function(x){mean(x,na.rm=TRUE)})
1 - sum(is.na(Y.all[which(X==1)]))/length(Y.all[which(X==1)])
Y <- Y.mid
# Ensure that each capture has a corresponding covariate
X[is.na(Y)] <- 0
Y[X==0] <- NA
# Remove individuals without any captures
missing.index <- which(apply(X, 1, function(x){sum(x)>0}))
X <- X[missing.index,]
Y <- Y[missing.index,]
t <- ncol(X)
n <- nrow(X)
# Identify first and last captures
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Take only the first 10 years
X <- X[which(f<10),1:10]
Y <- Y[which(f<10),1:10]
# Identify first and last captures again
t <- ncol(X)
n <- nrow(X)
f <- array(NA,n)
l <- array(NA,n)
for( i in 1:n){
f[i] <- min(which(X[i,]==1))
l[i] <- max(which(X[i,]==1))
}
# Standardize weight covariate
Y <- (Y-mean(Y, na.rm=TRUE))/sd(Y, na.rm=TRUE)
f
table(f)
setwd("C:/Users/Woody/Desktop/Github Repos/VBCJS/VBCJS")
